#
# Types for lxml/xmlerror.pxi
#
# Though intended as an include file for etree.pyx, most classes
# and funcs are independent enough to be implemented here

from typing import Iterator, Optional, Tuple, TypeVar, Union

_T = TypeVar("_T")

class _LogEntry:
    @property
    def doamin(self) -> int: ...
    @property
    def type(self) -> int: ...
    @property
    def level(self) -> int: ...
    @property
    def line(self) -> int: ...
    @property
    def column(self) -> int: ...
    @property
    def doamin_name(self) -> str: ...
    @property
    def type_name(self) -> str: ...
    @property
    def level_name(self) -> str: ...
    @property
    def message(self) -> str: ...
    @property
    def filename(self) -> Optional[str]: ...
    @property
    def path(self) -> str: ...

class _BaseErrorLog:
    @property
    def last_error(self) -> _LogEntry: ...
    def copy(self: _T) -> _T: ...
    def receive(self, log_entry: _LogEntry) -> None: ...

# Immutable list-like
class _ListErrorLog(_BaseErrorLog):
    def __iter__(self) -> Iterator[_LogEntry]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> _LogEntry: ...
    def __contains__(self, type: int) -> bool: ...
    def filter_domains(self, domains: Union[int, Tuple[int]]) -> _ListErrorLog: ...
    def filter_types(self, types: Union[int, Tuple[int]]) -> _ListErrorLog: ...
    def filter_levels(self, levels: Union[int, Tuple[int]]) -> _ListErrorLog: ...
    def filter_from_level(self, level: int) -> _ListErrorLog: ...
    def filter_from_fatals(self) -> _ListErrorLog: ...
    def filter_from_errors(self) -> _ListErrorLog: ...
    def filter_from_warnings(self) -> _ListErrorLog: ...

# Behave like context manager, but return types don't quite match
class _ErrorLog(_ListErrorLog):
    def __enter__(self) -> int: ...
    def __exit__(self) -> None: ...
    def clear(self) -> None: ...

class _DomainErrorLog(_ErrorLog): ...
class _RotatingErrorLog(_ErrorLog): ...
