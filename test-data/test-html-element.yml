- case: html_element_mixin_properties_ro
  parametrized:
    - prop: classes
      rt: lxml.html.Classes
    - prop: label
      rt: Union[lxml.html.LabelElement, None]
    - prop: base_url
      rt: Union[builtins.str, None]
    - prop: forms
      rt: builtins.list[lxml.html.FormElement]
    - prop: body
      rt: lxml.html.HtmlElement
    - prop: head
      rt: lxml.html.HtmlElement
  main: |
    from lxml import html
    elem = html.Element('div')
    reveal_type(elem.{{ prop }})  # N: Revealed type is '{{ rt }}'

- case: html_element_mixin_properties_rw
  main: |
    from lxml import html
    elem = html.Element('div')
    elem.classes = elem.classes
    elem.classes = {'cls1', 'cls2'}  # E: Incompatible types in assignment (expression has type "Set[str]", variable has type "Classes")
    # Cheating here! Actually LabelElement can't be created this way
    label = html.LabelElement()
    elem.label = label
    elem.label = elem  # E: Incompatible types in assignment (expression has type "HtmlElement", variable has type "Optional[LabelElement]")

- case: html_element_mixin_properties_bad
  main: |
    from lxml import html
    elem = html.Element('div')
    elem.head = elem.head
    elem.head = None
    result = elem.badprop
    elem.badprop = 'foobar'
  out: |
    main:3: error: Property "head" defined in "HtmlMixin" is read-only
    main:4: error: Incompatible types in assignment (expression has type "None", variable has type "HtmlElement")
    main:4: error: Property "head" defined in "HtmlMixin" is read-only
    main:5: error: "HtmlElement" has no attribute "badprop"
    main:6: error: "HtmlElement" has no attribute "badprop"

- case: html_element_mixin_method_set1
  parametrized:
  - args: val0, val0
  - args: val0, val1
  - args: val0, val2
  - args: val0, val3
  - args: val0
  - args: val1, val0
  - args: val1, val1
  - args: val1
  - args: val3, val0
  - args: val3, val3
  - args: val3
  main: |
    from lxml import etree, html
    val0 = 'some_str'
    val1 = b'some_str'
    val2 = None
    val3 = etree.QName('ns', 'tag')
    elem = html.Element('div')
    elem.set({{ args }})

- case: html_element_mixin_method_set2
  parametrized:
  - args: goodarg, badarg0
    pos: 2
    wrong_type: int
    exp_type: Union[str, bytes, QName, None]
  - args: badarg1, goodarg
    pos: 1
    wrong_type: object
    exp_type: Union[Union[str, bytes], QName]
  main: |
    from lxml import etree, html
    goodarg = 'some_str'
    badarg0 = 1
    badarg1 = object()
    elem = html.Element('div')
    elem.set({{ args }})  # E: Argument {{ pos }} to "set" of "HtmlElement" has incompatible type "{{ wrong_type }}"; expected "{{ exp_type }}"

- case: html_element_mixin_method_drop_
  parametrized:
  - func: drop_tree
  - func: drop_tag
  main: |
    from lxml import html
    elem = html.Element('div')
    elem.{{ func }}()

- case: html_element_mixin_method_find_rel_links
  main: |
    from lxml import html
    elem = html.Element('div')
    result = elem.find_rel_links('stylesheet')
    reveal_type(result)  # N: Revealed type is 'builtins.list[lxml.html.HtmlElement]'

- case: html_element_mixin_method_find_class
  parametrized:
  - args: arg0
  - args: arg1
  main: |
    from lxml import html
    elem = html.Element('div')
    arg0 = 'cls'
    arg1 = b'cls'
    result = elem.find_class({{ args }})

- case: html_element_mixin_method_get_element_by_id1
  parametrized:
  - args: arg0
    rt: lxml.html.HtmlElement
  - args: arg1
    rt: lxml.html.HtmlElement
  - args: arg1, arg2, arg3
    rt: Union[lxml.html.HtmlElement, builtins.int*]
  main: |
    from lxml import html
    elem = html.Element('div')
    arg0 = 'some_cls'
    arg1 = b'some_cls'
    arg2 = 3
    arg3 = False
    result = elem.get_element_by_id({{ args }})
    reveal_type(result)  # N: Revealed type is '{{ rt }}'

- case: html_element_mixin_method_get_element_by_id2
  parametrized:
  - args: arg0
    wrong_type: int
  - args: arg1
    wrong_type: bool
  main: |
    from lxml import html
    elem = html.Element('div')
    arg0 = 3
    arg1 = False
    result = elem.get_element_by_id({{ args }})
  out: |
    main:5: error: No overload variant of "get_element_by_id" of "HtmlMixin" matches argument type "{{ wrong_type }}"
    main:5: note:     <1 more non-matching overload not shown>
    main:5: note:     def get_element_by_id(self, id: Union[str, bytes]) -> HtmlElement
    main:5: note: Possible overload variant:

- case: html_element_mixin_method_text_content
  main: |
    from lxml import html
    elem = html.Element('div')
    result = elem.text_content()
    reveal_type(result)  # N: Revealed type is 'builtins.str'
    result = elem.text_content(None)  # E: Too many arguments for "text_content" of "HtmlMixin"

- case: html_element_mixin_method_iterlinks
  main: |
    from lxml import html
    elem = html.Element('div')
    result = elem.iterlinks()
    reveal_type(result)  # N: Revealed type is 'typing.Iterator[Tuple[lxml.html.HtmlElement, Union[builtins.str, None], builtins.str, builtins.int]]'
    result = elem.iterlinks(None)  # E: Too many arguments for "iterlinks" of "HtmlMixin"

- case: html_element_mixin_method_make_links_absolute1
  parametrized:
  - args: null
  - args: url
  - args: url, False
  - args: None, True, None
  - args: base_url=url
  - args: resolve_base_href=True
  - args: handle_failures=None
  main: |
    from lxml import html
    elem = html.Element('div')
    url = 'http://foo.bar'
    elem.make_links_absolute({{ args }})

- case: html_element_mixin_method_make_links_absolute2
  main: |
    from lxml import html
    elem = html.Element('div')
    url = 'http://foo.bar'
    badurl = b'http://foo.bar'
    elem.make_links_absolute(badurl)  # E: Argument 1 to "make_links_absolute" of "HtmlMixin" has incompatible type "bytes"; expected "Optional[str]"
    elem.make_links_absolute(url, 2, None)  # E: Argument 2 to "make_links_absolute" of "HtmlMixin" has incompatible type "int"; expected "bool"
    elem.make_links_absolute(handle_failures='badval')  # E: Argument "handle_failures" to "make_links_absolute" of "HtmlMixin" has incompatible type "Literal['badval']"; expected "Union[Literal['ignore'], Literal['discard'], None]"
    elem.make_links_absolute(badarg=1)  # E: Unexpected keyword argument "badarg" for "make_links_absolute" of "HtmlMixin"
    elem.make_links_absolute(url, True, 'discard', None)  # E: Too many arguments for "make_links_absolute" of "HtmlMixin"

- case: html_element_mixin_method_resolve_base_href
  main: |
    from lxml import html
    elem = html.Element('div')
    elem.resolve_base_href()
    elem.resolve_base_href(b'ignore')  # E: Argument 1 to "resolve_base_href" of "HtmlMixin" has incompatible type "Literal[b'ignore']"; expected "Union[Literal['ignore'], Literal['discard'], None]"
    elem.resolve_base_href(handle_failures='discard')
    elem.resolve_base_href(badarg=1)  # E: Unexpected keyword argument "badarg" for "resolve_base_href" of "HtmlMixin"
    elem.resolve_base_href(None, None)  # E: Too many arguments for "resolve_base_href" of "HtmlMixin"

- case: html_element_mixin_method_rewrite_links1
  parametrized:
  - args: repl_func
  - args: repl_func, resolve_base_href=False
  - args: repl_func, True, base
  - args: link_repl_func=repl_func, base_href=base
  - args: resolve_base_href=True, link_repl_func=repl_func
  main: |
    from lxml import html
    elem = html.Element('div')
    base = 'http://foo.bar'
    def repl_func(href: str):
      return href[1:]
    elem.rewrite_links({{ args }})

- case: html_element_mixin_method_rewrite_links2
  main: |
    from lxml import html
    elem = html.Element('div')
    badbase = b'http://foo.bar'
    def bad_func(href: bytes): ...
    def repl_func(href: str) -> str: ...
    elem.rewrite_links()  # E: Missing positional argument "link_repl_func" in call to "rewrite_links" of "HtmlMixin"
    elem.rewrite_links(bad_func)  # E: Argument 1 to "rewrite_links" of "HtmlMixin" has incompatible type "Callable[[bytes], Any]"; expected "Callable[[str], str]"
    elem.rewrite_links(repl_func, 'badval')  # E: Argument 2 to "rewrite_links" of "HtmlMixin" has incompatible type "str"; expected "bool"
    elem.rewrite_links(repl_func, True, badbase)  # E: Argument 3 to "rewrite_links" of "HtmlMixin" has incompatible type "bytes"; expected "Optional[str]"
