- case: cssselect_create_selector
  parametrized:
    - val: sel
      rt: lxml.cssselect.CSSSelector
    - val: sel.css
      rt: builtins.str
    - val: sel.path
      rt: builtins.str
  main: |
    from lxml import cssselect
    sel = cssselect.CSSSelector('#id')
    reveal_type({{ val }})  # N: Revealed type is '{{ rt }}'

- case: cssselect_evaluation_of_selector
  main: |
    from lxml import etree
    from lxml.cssselect import CSSSelector
    sel = CSSSelector('#id')
    document = etree.fromstring("<doc></doc>")
    result = sel(document)
    reveal_type(result)  # N: Revealed type is 'builtins.list[lxml.etree._Element]'

- case: cssselect_method_for_xml
  main: |
    from lxml import etree
    elem = etree.Element('doc')
    result = elem.cssselect('doc junk')
    reveal_type(result)  # N: Revealed type is 'builtins.list[lxml.etree._Element]'
    result = elem.cssselect('tag', translator='xml')
    reveal_type(result)  # N: Revealed type is 'builtins.list[lxml.etree._Element]'

- case: cssselect_method_for_xml_bad_arg1
  parametrized:
  - args: expr1
    wrong_type: bytes
  - args: expr2
    wrong_type: int
  main: |
    from lxml import etree
    elem = etree.Element('doc')
    expr1 = b'doc junk'
    expr2 = 42
    result = elem.cssselect({{ args }})
  out: |
    main:5: error: Argument 1 to "cssselect" of "_Element" has incompatible type "{{ wrong_type }}"; expected "str"

- case: cssselect_method_for_xml_bad_arg2
  main: |
    from lxml import etree
    elem = etree.Element('doc')
    result = elem.cssselect('tag', 'xml')
    result = elem.cssselect('tag', translator='junk')
  out: |
    main:3: error: Too many positional arguments for "cssselect" of "_Element"
    main:4: error: Argument "translator" to "cssselect" of "_Element" has incompatible type "Literal['junk']"; expected "Union[LxmlTranslator, Literal['xml'], Literal['html'], Literal['xhtml']]"

- case: cssselect_method_for_html
  parametrized:
    - args: expr
    - args: expr, translator
  main: |
    import sys
    if sys.version_info < (3, 8):
      from typing_extensions import Literal
    else:
      from typing import Literal
    from lxml import html
    elem = html.Element('div')
    expr = 'ul > li'
    translator: Literal['xhtml']
    result = elem.cssselect({{ args }})
    reveal_type(result)  # N: Revealed type is 'builtins.list[lxml.html.HtmlElement]'

- case: cssselect_method_for_html_bad_arg1
  parametrized:
    - args: expr1
      wrong_type: bytes
    - args: expr2
      wrong_type: int
  main: |
    from lxml import html
    elem = html.Element('div')
    expr1 = b'ul > li'
    expr2 = 42
    result = elem.cssselect({{ args }})
  out: |
    main:5: error: Argument 1 to "cssselect" of "HtmlElement" has incompatible type "{{ wrong_type }}"; expected "str"

- case: cssselect_method_for_html_bad_arg2
  main: |
    from lxml import html
    elem = html.Element('div')
    result = elem.cssselect('ul > li', 'junk')
  out: |
    main:3: error: Argument 2 to "cssselect" of "HtmlElement" has incompatible type "Literal['junk']"; expected "Union[LxmlTranslator, Literal['xml'], Literal['html'], Literal['xhtml']]"
