- case: etree_from_string_returns_element
  main: |
    from lxml import etree
    document = etree.fromstring("<doc></doc>")
    reveal_type(document)  # N: Revealed type is 'lxml.etree._Element'

- case: etree_xmlparser_makeelement
  main: |
    from lxml import etree
    parser = etree.XMLParser()
    element = parser.makeelement("foobar")
    reveal_type(element)  # N: Revealed type is 'lxml.etree._Element'

- case: etree_htmlparser_makeelement
  main: |
    from lxml import etree
    parser = etree.HTMLParser()
    element = parser.makeelement("foobar")
    reveal_type(element)  # N: Revealed type is 'lxml.etree._Element'

- case: etree_tostring_encoding_default_or_type
  main: |
    from lxml import etree
    result1 = etree.tostring(etree.Element("foo"))
    reveal_type(result1)  # N: Revealed type is 'builtins.bytes'
    result2 = etree.tostring(etree.Element("foo"), encoding=str)
    reveal_type(result2)  # N: Revealed type is 'builtins.str'

- case: etree_tostring_encoding_specific
  parametrized:
    - val: ascii
      rt: builtins.bytes
    - val: utf8
      rt: builtins.bytes
    - val: FOOBAR
      rt: Union[builtins.str, builtins.bytes]
    - val: unicode
      rt: builtins.str
  main: |
    from lxml import etree
    string = etree.tostring(etree.Element("foo"), encoding='{{ val }}')
    reveal_type(string)  # N: Revealed type is '{{ rt }}'

- case: etree_treebuilder_implements_parsertarget
  main: |
    # this test does no explicit checks; it should pass
    # if mypy doesn't raise an "Incompatible types in assignment"
    from lxml import etree
    target: etree.ParserTarget = etree.TreeBuilder()
- case: etree_HTML_returns_element
  main: |
    from lxml import etree
    document = etree.HTML("<doc></doc>", parser=etree.HTMLParser(), base_url="http://example.com/")
    reveal_type(document)  # N: Revealed type is 'lxml.etree._Element'
- case: etree_XML_returns_element
  main: |
    from lxml import etree
    document = etree.XML("<doc></doc>", parser=etree.XMLParser(), base_url="http://example.com/")
    reveal_type(document)  # N: Revealed type is 'lxml.etree._Element'

- case: etree_pyerrorlog_object
  main: |
    from lxml import etree
    obj = etree.PyErrorLog()
    reveal_type(obj)  # N: Revealed type is 'lxml.etree.PyErrorLog'
    reveal_type(obj.level_map)  # N: Revealed type is 'builtins.dict[builtins.int, builtins.int]'

- case: etree_error_log_struct
  main: |
    from lxml import etree
    parser = etree.XMLParser()
    document = etree.XML("<doc><somejunk!", parser=parser)
    last_err = parser.error_log.last_error
    reveal_type(last_err.level)  # N: Revealed type is 'builtins.int'
    reveal_type(last_err.filename)  # N: Revealed type is 'Union[builtins.str, None]'
